<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--
		Simple Spring-managed DataSource for embedded h2 database
		(http://www.h2database.com). H2 is used instead of HSQLDB in this Test
		Drive because it has better support for retrieving autogenerated keys
		using the JDBC 3 approach which is used by Spring's JdbcTemplate. 
		The dbInit bean takes care of creating and populating the sample tables.
	-->

	<!--<jdbc:embedded-database id="dataSource" type="H2" />-->

	<!-- jdbc  数据源配置 Oracle 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@10.9.1.4:1521:ehr" />
		<property name="username" value="cloud_dev" />
		<property name="password" value="cloud_dev" />
	</bean>
	-->
	
    <!-- SQL日志Filter -->
	 
    <!-- SQL日志Druid statfilter -->
	 <bean id="statfilter" class="com.alibaba.druid.filter.stat.StatFilter">    
	 </bean> 
	
	<!-- jdbc加密数据源配置 Druid-Oracle连接池 -->
	 <bean id="dataSource" class="com.inspur.cloudframework.druid.pool.CloudFrameworkDataSource">
		<property name="url" value="jdbc:wrap-jdbc:filters=log4j:${dataSource.url}" />
		<property name="username"  value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<property name="initialSize"  value="${dataSource.initialSize}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="filters" value="${dataSource.filters}"/>
		<property name="validationQuery" value="${dataSource.validationQuery}"/>
	</bean>
	 
	 
	
	<!-- JNDI数据源配置
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/medicine"/>
		<property name="inContainer" value="true"/>
	</bean>
	 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 加入数据权限的JdbcTemplate实现
	<bean id="securityJdbcTemplate" class="com.inspur.cloudframework.jdbc.core.CloudFrameworkJdbcTemplate">				
	</bean>
	 -->
    
	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<!-- <property name="mappingLocations" value="classpath*:hibernate/**/*.hbm.xml" /> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache/ehcache-hibernate-local.xml</prop>
			</props>
		</property>
		<!-- 
		因为使用了annotation.AnnotationSessionFactoryBean(注解型sessionFactory)，
		该类中有packagesToScan属性 ,需要配置该属性，用以指定需要扫描添加了注解的实体bean所在的包
		-->
		<property name="packagesToScan" value="com.inspur.iop.**.entity,com.inspur.cloud.**.entity,com.inspur.cloudframework.**.entity" />
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />	
</beans>